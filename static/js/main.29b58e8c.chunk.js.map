{"version":3,"sources":["components/ConversationSearch/index.js","utils/debounce.js","components/ConversationListItem/index.js","components/Toolbar/index.js","components/ToolbarButton/index.js","components/ConversationList/index.js","components/Compose/index.js","components/Message/index.js","utils/get-randomId.js","components/MessageList/index.js","components/Messenger/index.js","serviceWorker.js","index.js","components/App/index.js"],"names":["ConversationSearch","_this","this","func","wait","immediate","timeout","debounce","query","text","lowText","toLowerCase","lowQuery","splitText","split","res","i","forEach","t","idx","ar","ar2","k","length","l","charAt","up","toUpperCase","push","join","highlightedText","react_default","a","createElement","className","type","onChange","e","console","log","target","value","placeholder","ConversationListItem","props","useEffect","shave","_props$data","data","photo","name","date","id","currentDate","Date","toLocaleDateString","onClick","src","alt","Toolbar","title","leftItems","rightItems","ToolbarButton","icon","concat","ConversationList","sortedConversations","Toolbar_Toolbar","ToolbarButton_ToolbarButton","key","ConversationSearch_ConversationSearch","map","conversation","ConversationListItem_ConversationListItem","Compose","Message","isMine","startsSequence","endsSequence","showTimestamp","friendlyTimestamp","moment","timestamp","format","message","_getRandomId","Math","floor","random","MY_USER_ID","MessageList","_useState","useState","_useState2","Object","slicedToArray","messages","setMessages","conversationsId","clickHandler","getMessages","tempMessages","author","messageId","getTime","toConsumableArray","messageCount","previous","current","next","currentMoment","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","Message_Message","renderMessages","Compose_Compose","Messenger","setConversations","getConversations","axios","get","then","response","results","result","picture","large","first","last","dob","slice","sort","b","item","ConversationList_ConversationList","MessageList_MessageList","Boolean","window","location","hostname","match","ReactDOM","render","Messenger_Messenger","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29b58e8c.chunk.js","sourcesContent":["import React from 'react';\nimport './ConversationSearch.css';\nimport debounce from \"../../utils/debounce\";\n\nexport default function ConversationSearch() {\n\n   const highlightedText = (text) => {\n        if (this.query) {\n            const lowText = text.toLowerCase();\n            const lowQuery = this.query.toLowerCase();\n            const splitText = lowText.split(lowQuery);\n            const res = [];\n            let i = 0;\n            splitText.forEach((t, idx) => {\n                const ar = [];\n                const ar2 = [];\n                for (let k = 0; k < t.length; k++) {\n                    const l = t.charAt(k);\n                    const up = text.charAt(i) === text.charAt(i).toUpperCase();\n                    ar.push(up ? l.toUpperCase() : l.toLowerCase());\n                    i += 1;\n                }\n                for (let k = 0; k < lowQuery.length; k++) {\n                    const l = lowQuery.charAt(k);\n                    const up = text.charAt(i) === text.charAt(i).toUpperCase();\n                    ar2.push(up ? l.toUpperCase() : l.toLowerCase());\n                    i += 1;\n                }\n                res.push(ar.join(''));\n                if (idx < splitText.length - 1) {\n                    res.push('<span class=\"hl\">' + ar2.join('') + '</span>');\n                }\n            });\n            return res.join('');\n        }\n        return text;\n    }\n\n    const highlightedTextHandler = debounce(query => {\n        highlightedText(query);\n    }, 500);\n\n    const inputHandler = e => {\n       console.log('input', e.target.value)\n    }\n\n\n    return (\n      <div className=\"conversation-search\">\n        <input\n          type=\"search\"\n          onChange={inputHandler}\n          className=\"conversation-search-input\"\n          placeholder=\"Найти в сообщениях\"\n        />\n      </div>\n    );\n}\n","export default function debounce(func, wait, immediate) {\n    let timeout;\n    return function () {\n        const context = this;\n        const args = arguments;\n        const later = function () {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n}\n","import React, {useEffect, useState} from 'react';\nimport shave from 'shave';\nimport './ConversationListItem.css';\n\nexport default function ConversationListItem(props) {\n    useEffect(() => {\n        shave('.conversation-snippet', 20);\n    })\n\n    const {photo, name, text, date, id} = props.data;\n\n    const currentDate = new Date(date).toLocaleDateString('ru');\n\n        function handleClick() {\n            return console.log('click', id);\n        }\n\n    return (\n        <div className=\"conversation-list-item\" onClick={handleClick}>\n            <img className=\"conversation-photo\" src={photo} alt=\"conversation\"/>\n            <div className=\"conversation-info\">\n                <h1 className=\"conversation-title\">{name}</h1>\n                <div className=\"conversation-date\">{currentDate}</div>\n                <p className=\"conversation-snippet\">{text}</p>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './Toolbar.css';\n\nexport default function Toolbar(props) {\n    const { title, leftItems, rightItems } = props;\n    return (\n      <div className=\"toolbar\">\n        <div className=\"left-items\">{ leftItems }</div>\n        <h1 className=\"toolbar-title\">{ title }</h1>\n        <div className=\"right-items\">{ rightItems }</div>\n      </div>\n    );\n}","import React from 'react';\nimport './ToolbarButton.css';\n\nexport default function ToolbarButton(props) {\n    const { icon } = props;\n    return (\n      <i className={`toolbar-button ${icon}`} />\n    );\n}","import React from 'react';\nimport ConversationSearch from '../ConversationSearch';\nimport ConversationListItem from '../ConversationListItem';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport './ConversationList.css';\n\nexport default function ConversationList(props) {\n\n    const {sortedConversations} = props\n\n    return (\n        <div className=\"conversation-list\">\n            <Toolbar\n                title=\"Чаты\"\n                leftItems={[\n                    <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\"/>\n                ]}\n                rightItems={[\n                    <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\"/>\n                ]}\n            />\n            <ConversationSearch/>\n            {\n                sortedConversations.map(conversation =>\n                    <ConversationListItem\n                        key={conversation.name}\n                        data={conversation}\n                        id={conversation.id}\n                    />\n                )\n            }\n        </div>\n    );\n}\n","import React from 'react';\nimport './Compose.css';\n\nexport default function Compose(props) {\n    return (\n      <div className=\"compose\">\n        <input\n          type=\"text\"\n          className=\"compose-input\"\n          placeholder=\"Введите сообщение\"\n        />\n\n        {\n          props.rightItems\n        }\n      </div>\n    );\n}\n","import React from 'react';\nimport moment from 'moment';\nimport './Message.css';\n\nexport default function Message(props) {\n    const {\n        data,\n        isMine,\n        startsSequence,\n        endsSequence,\n        showTimestamp\n    } = props;\n\n    const friendlyTimestamp = moment(data.timestamp).format('LLLL');\n    return (\n        <div className={[\n            'message',\n            `${isMine ? 'mine' : ''}`,\n            `${startsSequence ? 'start' : ''}`,\n            `${endsSequence ? 'end' : ''}`\n        ].join(' ')}>\n            {\n                showTimestamp &&\n                <div className=\"timestamp\">\n                    {friendlyTimestamp}\n                </div>\n            }\n            <div className=\"bubble-container\">\n                <div className=\"bubble\" title={friendlyTimestamp}>\n                    {data.message}\n                </div>\n            </div>\n        </div>\n    );\n}\n","export default function _getRandomId() {\n    return Math.floor(Math.random() * 100)\n\n}\n","import React, {useEffect, useState} from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport _getRandomId from \"../../utils/get-randomId\";\nimport './MessageList.css';\n\nconst MY_USER_ID = 'сталин';\n\nexport default function MessageList(props) {\n    const [messages, setMessages] = useState([])\n    const {conversationsId, clickHandler} = props\n\n    // console.log(conversationsId, sortedConversations)\n\n    useEffect(() => {\n        getMessages();\n    }, [])\n\n    const getMessages = () => {\n        const tempMessages = [\n            {\n                id: 1,\n                author: 'сталин',\n                message: 'это супер-пупер длинное предложение, оно должно аккуратно перенестись и поместиться в пузырь =)',\n                messageId: _getRandomId(),\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 2,\n                author: 'троцкий',\n                message: 'это первый чат',\n                messageId: _getRandomId(),\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 3,\n                author: 'троцкий',\n                message: 'это супер-пупер длинное предложение, оно должно аккуратно перенестись и поместиться в пузырь =)',\n                timestamp: new Date().getTime(),\n                messageId: _getRandomId(),\n            },\n            {\n                id: 4,\n                author: 'сталин',\n                message: 'оу, вроде работает, но ты черкани еще пару строк в этот первый чат',\n                messageId: _getRandomId(),\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 5,\n                author: 'сталин',\n                message: 'это супер-пупер длинное предложение, оно должно аккуратно перенестись и поместиться в пузырь =)',\n                messageId: _getRandomId(),\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 6,\n                author: 'сталин',\n                message: 'оу, вроде работает, но ты черкани еще пару строк',\n                messageId: _getRandomId(),\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 7,\n                author: 'троцкий',\n                message: 'это супер-пупер длинное предложение, оно должно аккуратно перенестись и поместиться в пузырь =)',\n                messageId: _getRandomId(),\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 8,\n                author: 'троцкий',\n                message: 'оу, вроде работает, но ты черкани еще пару строк',\n                messageId: _getRandomId(),\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 9,\n                author: 'сталин',\n                message: 'это супер-пупер длинное предложение, оно должно аккуратно перенестись и поместиться в пузырь =)',\n                messageId: _getRandomId(),\n                timestamp: new Date().getTime()\n            },\n            {\n                id: 10,\n                author: 'троцкий',\n                message: 'оу, вроде работает, но ты черкани еще пару строк',\n                messageId: _getRandomId(),\n                timestamp: new Date().getTime()\n            },\n        ];\n\n        setMessages([...messages, ...tempMessages])\n    }\n\n    // Работаем с сообщениями, сортируем их в группах по времени получения\\отправки\n\n    const renderMessages = () => {\n        let i = 0;\n        let messageCount = messages.length;\n        let tempMessages = [];\n\n        while (i < messageCount) {\n            let previous = messages[i - 1];\n            let current = messages[i];\n            let next = messages[i + 1];\n            let isMine = current.author === MY_USER_ID;\n            let messageId = current.messageId\n            let currentMoment = moment(current.timestamp);\n            let prevBySameAuthor = false;\n            let nextBySameAuthor = false;\n            let startsSequence = true;\n            let endsSequence = true;\n            let showTimestamp = true;\n\n            if (previous) {\n                let previousMoment = moment(previous.timestamp);\n                let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n                prevBySameAuthor = previous.author === current.author;\n\n                if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n                    startsSequence = false;\n                }\n\n                if (previousDuration.as('hours') < 1) {\n                    showTimestamp = false;\n                }\n            }\n\n            if (next) {\n                let nextMoment = moment(next.timestamp);\n                let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n                nextBySameAuthor = next.author === current.author;\n\n                if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n                    endsSequence = false;\n                }\n            }\n\n            tempMessages.push(\n                <Message\n                    key={i}\n                    isMine={isMine}\n                    messageId={messageId}\n                    startsSequence={startsSequence}\n                    endsSequence={endsSequence}\n                    showTimestamp={showTimestamp}\n                    data={current}\n                />\n            );\n\n            // Переход к следующему сообщению в списке\n            i += 1;\n        }\n\n        return tempMessages;\n    }\n\n    return (\n        <div className=\"message-list\">\n            <Toolbar\n                title=\"Список сообщений\"\n                rightItems={[\n                    <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\"/>,\n                    <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\"/>,\n                    <ToolbarButton key=\"phone\" icon=\"ion-ios-call\"/>\n                ]}\n            />\n\n            <div className=\"message-list-container\">{renderMessages()}</div>\n\n            <Compose rightItems={[\n                <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\"/>,\n                <ToolbarButton key=\"image\" icon=\"ion-ios-image\"/>,\n                <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\"/>,\n                <ToolbarButton key=\"money\" icon=\"ion-ios-card\"/>,\n                <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\"/>,\n                <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\"/>\n            ]}/>\n        </div>\n    );\n}\n","import React, {useEffect, useState} from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport axios from \"axios\";\nimport _getRandomId from \"../../utils/get-randomId\";\n\nexport default function Messenger(props) {\n    const [sortedConversations, setConversations] = useState([]);\n    useEffect(() => {\n        getConversations()\n    }, [])\n\n    const getConversations = () => {\n        axios.get('https://randomuser.me/api/?results=20').then(response => {\n            let newConversations = response.data.results.map(result => {\n                return {\n                    photo: result.picture.large,\n                    name: `${result.name.first} ${result.name.last}`,\n                    text: 'Привет-привет! Тут супер-длинное сообщение, которое надо обрезать',\n                    date: result.dob.date,\n                    id: _getRandomId()\n                };\n            });\n            const sortedConversations = newConversations.slice().sort((a, b) => b.date - a.date)\n\n            setConversations([...sortedConversations])\n        });\n    }\n\n    const conversationsId = sortedConversations.map(item => item.id);\n\n    const clickHandler = () => {\n        console.log('click')\n    }\n\n    return (\n        <div className=\"messenger\">\n            <div className=\"scrollable sidebar\">\n                <ConversationList sortedConversations={sortedConversations}/>\n            </div>\n            <div className=\"scrollable content\">\n                <MessageList conversationsId={conversationsId}/>\n            </div>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Messenger from '../Messenger';\n\nexport default function App() {\n    return (\n      <div className=\"App\">\n        <Messenger />\n      </div>\n    );\n}"],"sourceRoot":""}